#!/bin/python3
import argparse
from configparser import ConfigParser
from datetime import datetime
from jinja2 import Template
import guestfs
import gzip
import logging
import lzma
import requests
import subprocess
import shutil
import sys
import tempfile
import time
import os

_log = None


class ComposeFailure(Exception):
    pass


def run_command(cmd, stdin=None, sudo=False, **kwargs):
    _log.debug('Running command: %s', cmd)
    if sudo:
        _log.info('Sudo command running')
        cmd = ['sudo'] + cmd
    _log.debug('Stdin: %s', stdin)
    p = subprocess.Popen(cmd,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE,
                         **kwargs)
    stdout, stderr = p.communicate(stdin)
    rc = p.wait()

    _log.debug('Return code: %s', rc)
    _log.debug('Stdout: %s', stdout)
    _log.debug('Stderr: %s', stderr)

    if rc != 0:
        raise ComposeFailure('Command failed, status: %s, out: %s, err: %s'
                             % (rc, stdout, stderr))

    return stdout.decode('utf-8'), stderr.decode('utf-8')


def assure_symlink(workdir, source, target):
    source = os.path.join(workdir, source)
    target = os.path.join(workdir, target)
    if os.path.exists(target):
        if os.readlink(target) == source:
            return
        else:
            os.remove(target)
    os.symlink(source, target)


def parse_args():
    parser = argparse.ArgumentParser(description='Hatlocker Compose script')
    parser.add_argument('--quiet', '-q', default=False, action='store_true')
    parser.add_argument('--verbose', '-v', default=0, action='count')
    parser.add_argument('--configuration', '-c', default='compose.cfg',
                        help='Compose config file')
    parser.add_argument('--workdir',
                        help='Working directory (temp if not specified)')
    parser.add_argument('--auto-version', default=False, action='store_true',
                        help='Automatically generate compose version')
    parser.add_argument('--debug-build', default=False, action='store_true',
                        help='Create a debug build')
    parser.add_argument('--version',
                        help='Compose version')
    # Arguments below this are for skipping compose steps for debugging
    parser.add_argument('--imageid',
                        help='Define an image ID if you want to continue')
    parser.add_argument('--skip-extraction', action='store_true',
                        help='Specify that guestfs extraction is done')
    parser.add_argument('--verity-roothash', help='Verity root hash')
    parser.add_argument('--skip-efi-generation', action='store_true',
                        help='Skip EFI generation')
    parser.add_argument('--skip-test-image', action='store_true',
                        help='Skip creating test image')
    parser.add_argument('--skip-boot-testing', action='store_true',
                        help='Skip boot testing')
    return parser.parse_args()


def create_verity_table(workdir):
    _log.info('Creating verity table')
    stdout, stderr = run_command(['veritysetup', 'format', '--hash=sha256',
                                  '--data-block-size=512',
                                  os.path.join(workdir, 'rootvol'),
                                  os.path.join(workdir, 'hashvol')])
    _log.info('Verity table created, parsing')

    uuid = None
    roothash = None
    for line in stdout.split('\n'):
        line = line.strip()
        if line.startswith('UUID:'):
            _log.debug('UUID line found: %s', line)
            if uuid is not None:
                raise ComposeFailure('Second UUID line found')
            uuid = line.split()[-1]
            if len(uuid) != 36:
                raise ComposeFailure('UUID length not expected')
        elif line.startswith('Root hash:'):
            _log.debug('Roothash line found: %s' % line)
            if roothash is not None:
                raise ComposeFailure('Second root hash line found')
            roothash = line.split()[-1]
            if len(roothash) != 64:
                raise ComposeFailure('Roothash length not expected')
    if uuid is None:
        raise ComposeFailure('No UUID found')
    if roothash is None:
        raise ComposeFailure('No root hash found')
    _log.info('UUID: %s', uuid)
    _log.info('Root hash: %s', roothash)

    return roothash


def setup_logging(verbosity):
    global _log

    level = None
    if verbosity == -1:
        level = logging.CRITICAL
    elif verbosity == 0:
        level = logging.ERROR
    elif verbosity == 1:
        level = logging.WARNING
    elif verbosity == 2:
        level = logging.INFO
    elif verbosity >= 3:
        level = logging.DEBUG

    logging.basicConfig(level=level)
    _log = logging.getLogger(__name__)


def clone_git_repo(git_url, target, refresh=False):
    if os.path.exists(target):
        # Exists, check that url is correct
        stdout, stderr = run_command(['git', 'remote', 'get-url', 'origin'],
                                     cwd=target)
        if stdout.strip() != git_url:
            raise ComposeFailure(
                'Git clone %s existed, but remote is incorrect' % target)
        if refresh:
            run_command(['git', 'pull'], cwd=target)
    else:
        run_command(['git', 'clone', git_url, target])
    stdout, stderr = run_command(['git', 'rev-parse', 'HEAD'],
                                 cwd=target)
    return stdout.strip()


def build_base_image(tdl, kscts, **kwargs):
    tmpl = None
    with open(os.path.join(workdir, 'definitions',
                           config['definitions']['kickstart'])) as f:
        tmpl = Template(f.read())
    env = {}
    env['base_version'] = config['definitions']['base_version']
    template = tmpl.render(**env)

    params = {}
    params['generate_icicle'] = '0'
    params['offline_icicle'] = '1'
    params['install_script'] = kscts
    params.update(kwargs)

    _log.info('Base image arguments: %s', params)

    res = requests.post('http://localhost:8075/imagefactory/base_images',
                        json={'base_image': {'template': template,
                                             'parameters': params}})
    _log.info('Response code: %s', res.status_code)
    _log.debug('Response: %s', res.text)

    res.raise_for_status()
    res = res.json()
    return res['base_image']['id']


def wait_for_image(imageid):
    res = requests.get('http://localhost:8075/imagefactory/base_images/%s'
                       % imageid).json()
    status = res['base_image']['status']

    _log.info('Waiting for build to finish...')

    while status in ['NEW', 'PENDING', 'BUILDING']:
        _log.debug('Status: %s, percentage: %s',
                   status, res['base_image']['percent_complete'])
        time.sleep(10)
        res = requests.get('http://localhost:8075/imagefactory/base_images/%s'
                           % imageid).json()
        status = res['base_image']['status']

    status = res['base_image']['status']
    _log.info('Final status: %s', status)

    if status != 'COMPLETE':
        raise ComposeFailure('Base image build failed with status %s' % status)

    return imageid


def get_kickstart(workdir, config, version):
    tmpl = None
    with open(os.path.join(workdir, 'definitions',
                           config['definitions']['kickstart'])) as f:
        tmpl = Template(f.read())
    env = {}
    env['base_version'] = config['definitions']['base_version']
    env['version'] = version
    return tmpl.render(**env)


def create_cmdline(workdir, debug, config, rootuuid, roothash):
    cmds = ['root=/dev/mapper/usr',
            'rd.lvm.lv=datavg/datavol',
            'rd.luks.uuid=luks-ca9ea0ec-7514-11e7-a171-e4a4714acfe5',
            'rd.auto=1',
            'LANG=en_US.UTF-8',
            'verity.usr=UUID=%s' % rootuuid,
            'verity.usrhash=%s' % roothash]
    if debug:
        cmds.extend(['text',
                     'debug',
                     'rd.shell',
                     'rd.retry=10',
                     'rd.timeout=30'])
    else:
        cmds.extend(['rhgb',
                     'quiet',
                     'rd.emergency=reboot'])
    cmdline = ' '.join(cmds)
    _log.info('Command line: %s', cmdline)
    with open(os.path.join(workdir, 'cmdline'), 'w') as f:
        f.write(cmdline)


def create_qemu_cmd(workdir, config):
    machinetype = 'q35,smm=on'
    if config['testing'].getboolean('use_kvm'):
        machinetype += ',accel=kvm'
    cmd = [
        config['testing']['qemu_binary'],
        '-machine', machinetype,
        '-display', 'none',
        '-no-user-config',
        '-nodefaults',
        '-m', '2048',
        '-smp', '2,sockets=2,cores=1,threads=1',
        '-chardev', 'pty,id=charserial1',
        '-device', 'isa-serial,chardev=charserial1,id=serial1',
        '-global', 'driver=cfi.pflash01,property=secure,value=on',
        '-drive',
        'file=%s,if=pflash,format=raw,unit=0,readonly=on' % (
            config['testing']['ovmf_code']),
        '-drive',
        'file=%s,if=pflash,format=raw,unit=1,readonly=on' % (
            config['testing']['ovmf_vars']),
        '-drive',
        'file=%s,format=raw,unit=2,readonly=off' % (
            os.path.join(workdir, 'test.img')),
        '-object', 'rng-random,id=objrng0,filename=/dev/urandom',
        '-serial', 'stdio']
    return cmd


def combine_files(dst, *srcs, **kwargs):
    openfunc = open
    if kwargs.get('lzma', False):
        openfunc = lzma.open
    elif kwargs.get('gzip', False):
        openfunc = gzip.open

    with openfunc(dst, 'wb') as dstf:
        for src in srcs:
            with open(src, 'rb') as srcf:
                shutil.copyfileobj(srcf, dstf)


def create_efi_binary(workdir, config):
    run_command(
        ['objcopy',
         '--add-section', '.osrel=%s' % os.path.join(workdir,
                                                     'definitions',
                                                     'osrelease'),
         '--change-section-vma', '.osrel=0x20000',
         '--add-section', '.cmdline=%s' % os.path.join(workdir, 'cmdline'),
         '--change-section-vma', '.cmdline=0x30000',
         '--add-section', '.linux=%s' % os.path.join(workdir, 'vmlinuz'),
         '--change-section-vma', '.linux=0x2000000',
         '--add-section', '.initrd=%s' % os.path.join(workdir, 'initramfs'),
         '--change-section-vma', '.initrd=0x3000000',
         config['efi']['stub_path'], os.path.join(workdir, 'efiapp')])


def extract_image(workdir, bodyfile):
    os.environ['LIBGUESTFS_BACKEND'] = 'direct'
    g = guestfs.GuestFS(python_return_dict=True)
    g.add_drive_opts(bodyfile, readonly=1)

    _log.info('Launching GuestFS')
    g.launch()
    _log.info('GuestFS ready')
    oss = g.inspect_os()
    _log.debug('OSs: %s', oss)
    if len(oss) != 1:
        raise ComposeFailure('Not exactly one OS found')
    osroot = oss[0]

    _log.info('Mounting filesystem')
    mps = {'/': '/dev/sda2', '/boot': '/dev/sda1'}
    _log.debug('Mountpoints: %s', mps)
    if not '/' in mps:
        raise ComposeFailure('No / found')
    if not '/boot' in mps:
        raise ComposeFailure('No /boot found')
    if len(mps) != 2:
        raise ComposeFailure('Extra partitions found')
    g.mount_ro(mps['/'], '/')
    g.mount_ro(mps['/boot'], '/boot')
    rootvol = mps['/']
    _log.info('Filesystems mounted')

    _log.info('Downloading kernel data')
    vmlinuz = None
    initramfs = None
    for fname in g.ls('/boot'):
        if fname.startswith('vmlinuz-') and not 'rescue' in fname:
            _log.debug('Vmlinuz found: %s', fname)
            if vmlinuz is not None:
                raise ComposeFailure('More than one vmlinuz found')
            vmlinuz = fname
        elif fname.startswith('hlinitramfs-') and not 'rescue' in fname:
            _log.debug('Initramfs found: %s', fname)
            if initramfs is not None:
                raise ComposeFailure('More than one initramfs found')
            initramfs = fname
    if not vmlinuz:
        raise ComposeFailure('No vmlinuz found')
    if not initramfs:
        raise ComposeFailure('No initramfs found')
    _log.debug('Downloading vmlinuz: %s, initramfs: %s', vmlinuz, initramfs)
    g.download('/boot/%s' % vmlinuz, os.path.join(workdir, 'vmlinuz'))
    g.download('/boot/%s' % initramfs, os.path.join(workdir, 'initramfs'))
    _log.info('Kernel data downloaded')

    _log.info('Downloading root volume')
    g.download(rootvol, os.path.join(workdir, 'rootvol'))
    _log.info('Root volume downloaded')

    _log.info('Clearing up GuestFS')
    g.umount_all()
    _log.info('GuestFS cleared')


def get_blkfile_uuid(workdir, filename):
    stdout, stderr = run_command(['blkid',
                                  os.path.join(workdir, filename)])
    stdout = stdout.strip().split()
    blkuuid = None
    for part in stdout:
        if part.startswith('UUID="'):
            _log.debug('UUID part found: %s', part)
            if blkuuid is not None:
                raise ComposeFailure('Multiple UUID parts found')
            # String example: UUID="44772f90-22e2-424a-ae5e-3e2064ace80d"
            blkuuid = part[6:-1]
            if len(blkuuid) != 36:
                raise ComposeFailure('UUID length unexpected')
    _log.info('%s blkuuid: %s', filename, blkuuid)
    return blkuuid


curphase = None
def phase_msg(phase=None):
    global curphase
    if phase:
        curphase = phase
        print('START: %s', phase)
    else:
        print('DONE: %s', curphase)


def compose(workdir, config, args):
    _log.info('Initializing compose for version %s', args.version)

    if args.imageid is not None:
        if not os.path.isdir(os.path.join(workdir, 'definitions')):
            raise ComposeFailure('Incorrect workdir specified')
        imgid = args.imageid
        _log.info('Continuing with provided image ID and definitions')
    else:
        # Getting definitions
        phase_msg('Get definitions')
        definitions_hash = clone_git_repo(
            config['definitions']['git_url'],
            os.path.join(workdir, 'definitions'))
        _log.info('Definitions hash: %s', definitions_hash)
        phase_msg()

        phase_msg('Generate kickstart')
        kscts = get_kickstart(workdir, config, args.version)
        _log.info('Kickstart: %s', kscts)
        phase_msg()

        # Build base image
        phase_msg('Building base image')
        imgid = build_base_image(
            os.path.join(workdir, 'definitions', config['definitions']['tdl']),
            kscts)
        _log.info('Image ID: %s', imgid)
        phase_msg()

    phase_msg('Waiting for base image to finish')
    wait_for_image(imgid)
    phase_msg()
    _log.info('Image ID: %s', imgid)

    bodyfile = config['imagefactory'].get('storage_body_path_template',
                                          vars={'imgid': imgid})
    if not os.path.isfile(bodyfile):
        raise ComposeFailure('Unable to find image body at %s' % bodyfile)
    _log.debug('Image body at: %s', bodyfile)

    if not args.skip_extraction:
        phase_msg('Extracting image contents')
        extract_image(workdir, bodyfile)
        phase_msg()

    if not args.verity_roothash:
        phase_msg('Creating verity hash volume')
        roothash = create_verity_table(workdir)
        phase_msg()
    else:
        roothash = args.verity_roothash

    if not os.path.exists(os.path.join(workdir, 'combinedvol')):
        phase_msg('Combining volumes')
        combine_files(os.path.join(workdir, 'combinedvol'),
                      os.path.join(workdir, 'rootvol'),
                      os.path.join(workdir, 'hashvol'),
                      gzip=True)
        phase_msg()

    if not args.skip_efi_generation:
        phase_msg('Determining block uuid')
        rootuuid = get_blkfile_uuid(workdir, 'rootvol')
        phase_msg()

        phase_msg('Generating kernel command line')
        create_cmdline(workdir, args.debug_build, config, rootuuid, roothash)
        phase_msg()

        phase_msg('Generating EFI binary')
        create_efi_binary(workdir, config)
        phase_msg()

    if not args.skip_test_image:
        phase_msg('Symlinking files')
        assure_symlink(workdir, "efiapp", "%s.efi" % args.version)
        assure_symlink(workdir, "combinedvol", "%s.gz" % args.version)
        phase_msg()

        phase_msg('Getting installer repo')
        installer_hash = clone_git_repo(
            config['testing']['installer_repo'],
            os.path.join(workdir, 'installer'))
        _log.info('Installer hash: %s', installer_hash)
        phase_msg()

        phase_msg('Preparing full disk image for testing')
        _log.debug('Emptying')
        run_command(['truncate', '--size=23G',
                     os.path.join(workdir, 'test.img')])
        run_command(['wipefs', '--force', '--all',
                     os.path.join(workdir, 'test.img')])

        _log.debug('Mounting')
        stdout, stderr = run_command(
            ['losetup', '--show', '--find', os.path.join(workdir, 'test.img')],
                    sudo=True)
        disk = stdout.strip()
        _log.debug('Disk: %s', disk)
        devid = disk[len('/dev/'):]
        _log.debug('Devid: %s', devid)

        _log.debug('Partitioning')
        run_command(["/usr/bin/bash",
                     os.path.join(workdir, "installer",
                                  config['testing']['partition_script']),
                     devid],
                    sudo=True)

        _log.debug('Installing')
        run_command(["/usr/bin/bash",
                     os.path.join(workdir, "installer",
                                  config['testing']['setup_script']),
                     '%sp' % devid,
                     args.version,
                     "file://%s" % workdir,
                     '--skip-efi',
                     '--efi-boot'],
                    sudo=True)

        _log.debug('Unmounting')
        run_command(['losetup', '--detach', disk], sudo=True)
        phase_msg()

    if not args.skip_boot_testing:
        phase_msg('Boot testing')
        cmd = create_qemu_cmd(workdir, config)
        print('QEMU cmd: %s' % cmd)
        print('QEMU cmd: %s' % ' '.join(cmd))
        phase_msg()


def main():
    args = parse_args()
    config = ConfigParser()
    if len(config.read(args.configuration)) != 1:
        print('Invalid configuration file specified')
        sys.exit(1)
    if not args.version:
        if not args.auto_version:
            raise ComposeFailure('No version or auto-version specified')
        args.version = datetime.utcnow().strftime('%Y%m%d%H%M')
    if args.quiet:
        args.verbose = -1
    setup_logging(args.verbose)

    _log.debug('Arguments: %s', args)

    if args.workdir is None:
        args.workdir = tempfile.mkdtemp(prefix='hatlocker-composer-workdir-')

    _log.debug('Workdir: %s', args.workdir)

    compose(args.workdir, config, args)


if __name__ == '__main__':
    main()
